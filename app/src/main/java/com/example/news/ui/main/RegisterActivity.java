package com.example.news.ui.main;import android.app.Activity;import android.app.ProgressDialog;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import com.example.news.Models.UserModel;import com.example.news.R;import com.example.news.utils.FileUploadHelper;import com.example.news.utils.InternetConnectionChecker;import com.example.news.utils.UploadFile;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import java.util.UUID;public class RegisterActivity extends AppCompatActivity implements FileUploadHelper {    private static final int PICK_IMAGE_REQUEST = 234;    FirebaseAuth mAuth;    DatabaseReference databaseReference;    UploadFile uploadFile;    FirebaseUser user;    ImageView photoImageView;    String photoString = "";    private EditText userName;    private EditText email;    private EditText password;    private EditText repeated_password;    private Uri filePath;    private TextView textViewSignin;    private ProgressDialog progressDialog;    private  Button RegisterButton;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.register);        userName = findViewById(R.id.userName);        email = findViewById(R.id.EmailRegister);        password = findViewById(R.id.PasswordRegister);        repeated_password = findViewById(R.id.Repeated_PasswordRegister);        photoImageView = findViewById(R.id.PhotoimageView);        RegisterButton =  findViewById(R.id.RegisterButton);        textViewSignin = findViewById(R.id.textViewSignin);        databaseReference = FirebaseDatabase.getInstance().getReference();        progressDialog = new ProgressDialog(this);        mAuth = FirebaseAuth.getInstance();        user = mAuth.getCurrentUser();        if (user != null) {            // User is signed in            Log.v("uid", user.getUid());            Intent intent = new Intent(getApplicationContext(), MainActivity.class);            startActivity(intent);        } else {            // User is signed out        }        textViewSignin.setOnClickListener(v ->                startActivity(new Intent(getBaseContext(), SignInActivity.class))        );        photoImageView.setOnClickListener(v ->                openImageActivity()        );        RegisterButton.setOnClickListener(view ->          registering(email.getText().toString().trim(), password.getText().toString().trim(), repeated_password.getText().toString().trim())        );    }    private void openImageActivity() {        Intent intent = new Intent();        intent.setType("image/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(Intent.createChooser(intent, "Select Picture"),                PICK_IMAGE_REQUEST);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK) {            Log.v("Instructor", "Req : " + requestCode + " Res :" + resultCode + " Intent : " + data.getData().toString());            filePath = data.getData();            String storagePath = "images/usersPhoto/" + UUID.randomUUID();            uploadFile = new UploadFile(filePath, this, this, storagePath);        }    }    private void registering(String Email, final String Password, String Repeated_Password) {        if (!validateForm()) {            return;        }        progressDialog.setMessage("Registering");        progressDialog.show();        if (Password.equals(Repeated_Password)) {            mAuth.createUserWithEmailAndPassword(Email, Password)                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                        @Override                        public void onComplete(@NonNull Task<AuthResult> task) {                            InternetConnectionChecker internetConnectionChecker = new InternetConnectionChecker(getApplicationContext());                            if (task.isSuccessful()) {                                // Sign in success, update UI with the signed-in user's information                                Log.d("success", "");                                DatabaseReference myRef = databaseReference;                                if (photoString.isEmpty()) {                                    photoString = "https://firebasestorage.googleapis.com/v0/b/dealgamed-f2066.appspot.com/o/images%2FusersPhoto%2Fprofile.png?alt=media&token=b832ae10-6cda-45f5-9681-4ff355736da4";                                }                                UserModel newUser = new UserModel();                                newUser.setEmail(email.getText().toString().trim());                                newUser.setName(String.valueOf(userName.getText()));                                newUser.setPhoto(photoString);                                user = mAuth.getCurrentUser();                                Toast.makeText(RegisterActivity.this, "register", Toast.LENGTH_SHORT).show();                                myRef.child("users").child(user.getUid()).setValue(newUser);                                String Uid = myRef.child("users").child(user.getUid()).getKey();                                myRef.child("users").child(user.getUid()).child("uid").setValue(Uid);                                finish();                                startActivity(new Intent(getBaseContext(), MainActivity.class));                            } else {                                if (Password.length() <= 6) {                                    Toast.makeText(RegisterActivity.this, R.string.password_success,Toast.LENGTH_SHORT).show();                                    progressDialog.dismiss();                                } else if (!internetConnectionChecker.isInternetOn()) {                                    Toast.makeText(RegisterActivity.this, R.string.email_wrong,                                            Toast.LENGTH_SHORT).show();                                    progressDialog.dismiss();                                } else Toast.makeText(RegisterActivity.this, R.string.no_internet,                                        Toast.LENGTH_SHORT).show();                                progressDialog.dismiss();                            }                        }                    });        } else {            repeated_password.setError(getString(R.string.dont_match));        }    }    private boolean validateForm() {        boolean valid = true;        String UserName = userName.getText().toString();        if (TextUtils.isEmpty(UserName)) {            userName.setError(getString(R.string.require));            valid = false;        } else {            repeated_password.setError(null);        }        String emailString = email.getText().toString();        if (TextUtils.isEmpty(emailString)) {            email.setError(getString(R.string.require));            valid = false;        } else {            email.setError(null);        }        String passwordString = password.getText().toString();        if (TextUtils.isEmpty(passwordString)) {            password.setError(getString(R.string.require));            valid = false;        } else {            password.setError(null);        }        String repeatedPasswordString = repeated_password.getText().toString();        if (TextUtils.isEmpty(repeatedPasswordString)) {            repeated_password.setError(getString(R.string.require));            valid = false;        } else {            repeated_password.setError(null);        }        return valid;    }    @Override    public void fileUploaded(String url) {        photoString = url;      Glide.with(getApplicationContext())                .load(photoString)                .apply(RequestOptions.circleCropTransform())                .into(photoImageView);    }}